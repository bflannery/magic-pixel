service: magicPixel

frameworkVersion: "2"

provider:
  name: aws
  runtime: python3.9
  versionFunctions: false
  region: us-east-1
  tracing:
    apiGateway: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - cloudwatch:PutMetricData
      Resource: "*"
    - Effect: Allow
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:PutObjectAcl"
      Resource:
        - arn:aws:s3:::${self:custom.s3.magicPixelBucket}/*
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:GetQueueUrl
      Resource:
        - Fn::GetAtt:
            - EventTrackerQueue
            - Arn
        - Fn::GetAtt:
            - EventTrackerIdentityQueue
            - Arn
  environment:
    ENV: ${opt:stage, 'local'}
    SQS_REGION: ${self:custom.sqs.region}
    SQS_ENDPOINT_URL: ${self:custom.sqs.endpointUrl}
    SQS_EVENT_TRACKER_QUEUE_NAME: ${self:custom.sqs.eventTrackerQueueName}
    SQS_EVENT_TRACKER_IDENTITY_QUEUE_NAME: ${self:custom.sqs.eventTrackerIdentityQueueName}
    SECRET_KEY: ${self:custom.flask.secretKey}
    POSTGRES_USER: ${self:custom.postgres.${opt:stage, 'dev'}.user}
    POSTGRES_PW: ${self:custom.postgres.${opt:stage, 'dev'}.pw}
    POSTGRES_URL: ${self:custom.postgres.${opt:stage, 'dev'}.url}
    POSTGRES_DB: ${self:custom.postgres.${opt:stage, 'dev'}.db}
    MAGIC_PIXEL_BUCKET: ${self:custom.s3.magicPixelBucket}

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-finch
  - serverless-offline-sqs
  - serverless-offline

custom:
  flask:
    secretKey: 'c0cbf5992af08ede97e11a3e'
  s3:
    magicPixelBucket: ${opt:stage, 'dev'}-magic-pixel
  sqs:
    region: 'us-east-1'
    endpointUrl: ''
    eventTrackerQueueName: ${opt:stage, 'dev'}-event-tracker-queue
    eventTrackerIdentityQueueName: ${opt:stage, 'dev'}-event-tracker-identity-queue
  postgres:
    local:
      user: 'postgres'
      pw: 'docker'
      url: 'localhost'
      db: 'postgres'
    dev:
      user: 'root'
      pw: 'password'
      url: 'url'
      db: 'db'
  wsgi:
    app: app.app
    packRequirements: false
    pythonBin: python
    pythonRequirements:
      dockerizePip: "non-linux"
  serverless-offline:
    httpPort: 5000
  serverless-offline-sqs:
    autoCreate: false                 # create queue if not exists
    apiVersion: '2012-11-05'
    endpoint: http://0.0.0.0:9324
    region: us-east-1
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false


package:
  exclude:
    - node_modules/**
    - venv/**
    - .venv/**
    - static/**
    - client/**
    - package.json
    - package-lock.json
    - .pytest_cache/**
    - README.md

  include:
    - event-tracker/**

functions:
  app:
    handler: wsgi_handler.handler
    timeout: 30
    memorySize: 512
#    vpc:
#      securityGroupIds:
#        - sg-0ca7e29791a26efe7 # lambda sg
#      subnetIds:
#        - subnet-01d66241214a2f8f0
    events:
      - http:
          path: /
          method: ANY
      - http:
          path: "/{proxy+}"
          method: ANY
          cors:
            origins:
              - "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
            maxAge: 86400
  authentication:
    handler: ./lambdas/authentication.authentication
    timeout: 30
    memorySize: 512
    events:
      - http:
          path: /authentication
          method: post
  event-collection:
    handler: ./lambdas/events.event_collection
    timeout: 30
    memorySize: 512
    events:
      - http:
          path: event/collection
          method: post
  event-ingestion:
    handler: ./lambdas/events.event_ingestion
    timeout: 60
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - EventTrackerQueue
              - Arn
  event-identity:
    handler: ./lambdas/events.event_identity
    timeout: 60
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - EventTrackerIdentityQueue
              - Arn

resources:
  Resources:
    EventTrackerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqs.eventTrackerQueueName}
        VisibilityTimeout: 300
        RedrivePolicy:
          maxReceiveCount: 5
          deadLetterTargetArn:
            Fn::GetAtt:
              - EventDLQueue
              - Arn
    EventTrackerDLQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqs.eventTrackerQueueName}-deadletter
        MessageRetentionPeriod: 604800
    EventTrackerIdentityQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqs.eventTrackerIdentityQueueName}
        VisibilityTimeout: 300
        RedrivePolicy:
          maxReceiveCount: 5
          deadLetterTargetArn:
            Fn::GetAtt:
              - EventTrackerIdentityDLQueue
              - Arn
    EventTrackerIdentityDLQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqs.eventTrackerIdentityQueueName}-deadletter
        MessageRetentionPeriod: 604800